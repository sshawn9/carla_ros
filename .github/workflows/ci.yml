name: libcarla with CARLA 0.9.15 on ubuntu 22.04

on: workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: ubuntu:22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y wget software-properties-common
          add-apt-repository ppa:ubuntu-toolchain-r/test -y
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add
          apt-add-repository "deb http://archive.ubuntu.com/ubuntu focal main universe"
          apt-get update
          apt-get install -y build-essential clang-10 lld-10 g++-7 cmake ninja-build libvulkan1 python python3 python3-dev python3-pip libpng-dev libtiff5-dev libjpeg-dev tzdata sed curl unzip autoconf libtool rsync libxml2-dev git git-lfs
          update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-10/bin/clang++ 180
          update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-10/bin/clang 180
          update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 180
          pip install --user setuptools &&
          pip3 install --user -Iv setuptools==47.3.1
          pip install --user distro
          pip3 install --user distro
          pip install --user wheel
          pip3 install --user wheel auditwheel==4.0.0
      - name: Download github repositories
        run: |
          git clone --depth 1 -b carla https://github.com/CarlaUnreal/UnrealEngine.git ~/UnrealEngine_4.26
      - name: Build Unreal Engine
        run: |
          cd ~/UnrealEngine_4.26
          ./Setup.sh
          ./GenerateProjectFiles.sh
          make
      - name: Replace build tool with 0.9.14
        run: |
          rm -rf carla/Util/BuildTools
          mkdir tmp && cd tmp
          git clone --depth 1 -b 0.9.14 https://github.com/carla-simulator/carla.git 
          cd .. && cp -r tmp/carla/Util/BuildTools carla/Util
      - name : Fix carla/Util/BuildTools/Setup.sh
        run: |
          sed -i 's/git reset --hard ${RECAST_COMMIT}/git checkout carla/g' carla/Util/BuildTools/Setup.sh
          sed -i '/mkdir -p \"${PWD}\/${RECAST_BASENAME}-install\/include\/recast\"/d' carla/Util/BuildTools/Setup.sh
          sed -i '/mv \"${PWD}\/${RECAST_BASENAME}-install\/include\/\"\*h/d' carla/Util/BuildTools/Setup.sh
      - name : Disable test
        run: |
          sed -i 's/add_subdirectory(\"test\")/#add_subdirectory(\"test\")/g' carla/LibCarla/cmake/CMakeLists.txt
      - name : Remove dirty label
        run: |
          sed -i 's/git describe --tags --dirty --always/git describe --tags --always/g' carla/Util/BuildTools/Environment.sh
      - name: Build python package for carla client
        run: |
          cd carla
          make PythonAPI.3
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: carla-${{github.event.inputs.carla-version}}-ubuntu-${{github.event.inputs.ubuntu-version}}
          body: |
            These python packages are built and released by CI for carla client python api.
            Carla: v${{github.event.inputs.carla-version}}
            OS: ubuntu-${{github.event.inputs.ubuntu-version}}
          artifacts: "carla/PythonAPI/carla/dist/*"



jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Check
        run: make check_format

  ros:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          #- docker_image: melodic-robot
          #  ros_distro: melodic
          #  ros_python_version: 2
          #  ros_version: 1

          - docker_image: noetic-robot
            ros_distro: noetic
            ros_python_version: 3
            ros_version: 1

          - docker_image: foxy
            ros_distro: foxy
            ros_python_version: 3
            ros_version: 2
    container:
      image: ros:${{ matrix.docker_image }}
    env:
      SCENARIO_RUNNER_PATH: ""
      DEBIAN_FRONTEND: "noninteractive"
      ROS_DISTRO: ${{ matrix.ros_distro }}
      ROS_VERSION: ${{ matrix.ros_version }}
      ROS_PYTHON_VERSION: ${{ matrix.ros_python_version }}
    steps:
      # We currently cannot use checkout@v2 because git version on ros images is below 2.18
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true
      - name: Setup
        run: |
          ./install_dependencies.sh
          sudo apt-get install --no-install-recommends -y python3-rospkg
      - name: ROS2 Build, Test, Lint
        if: ${{ matrix.ros_version == 2 }}
        shell: bash
        run: |
          source /opt/ros/$(rosversion -d)/setup.bash
          colcon build --continue-on-error
          # colcon test && colcon test-result
          source install/setup.bash
      - name: ROS1 Build, Test, Lint
        if: ${{ matrix.ros_version == 1 }}
        shell: bash
        run: |
          mkdir -p $GITHUB_WORKSPACE/../catkin_ws/src
          cd $GITHUB_WORKSPACE/../catkin_ws/src
          ln -s $GITHUB_WORKSPACE
          cd ..
          source /opt/ros/$(rosversion -d)/setup.bash
          catkin init
          cd $GITHUB_WORKSPACE/../catkin_ws &&
          catkin build --summarize --no-status --force-color
          catkin run_tests --no-status --force-color && catkin_test_results
          source devel/setup.bash
          cd $GITHUB_WORKSPACE
        #  make pylint
        # TODO enable pylint

  debian:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - docker_image: melodic-robot
            ros_distro: melodic
            ros_python_version: 2
            ros_version: 1

          - docker_image: noetic-robot
            ros_distro: noetic
            ros_python_version: 3
            ros_version: 1
    container:
      image: ros:${{ matrix.docker_image }}
    env:
      SCENARIO_RUNNER_PATH: ""
      DEBIAN_FRONTEND: "noninteractive"
      ROS_DISTRO: ${{ matrix.ros_distro }}
      ROS_VERSION: ${{ matrix.ros_version }}
      ROS_PYTHON_VERSION: ${{ matrix.ros_python_version }}
    steps:
      # We currently cannot use checkout@v2 because git version on ros images is below 2.18
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true
      - name: Setup
        run: ./install_dependencies.sh
      - name: Build Debian Package
        run: make deb
